@page "/contexts/{Context}"
@using Port.Shared
@using System.Threading
@using Port.Client.Threading
@inject HttpClient Http
@implements IDisposable

<h1>Port forwards</h1>

<p>Configured port forwards.</p>

@if (_pods == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h2>Deployments</h2>
    <table class="table">
        <thead>
            <tr>
                <th>@nameof(Deployment.Namespace)</th>
                <th>@nameof(Deployment.Name)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var deployment in _deployments)
            {
                <tr>
                    <td>@deployment.Namespace</td>
                    <td>@deployment.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Pods</h2>
    <table class="table">
        <thead>
            <tr>
                <th>@nameof(Pod.Namespace)</th>
                <th>@nameof(Pod.Name)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pod in _pods)
            {
                <tr>
                    <td>@pod.Namespace</td>
                    <td>@pod.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Services</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Namespace</th>
                <th>Service</th>
                <th>Pod</th>
                <th>Container port</th>
                <th>Protocol type</th>
                <th>Host port</th>
                <th>Enable / Disable</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Context="serviceGroups" Items="@(_portForwards.GroupBy(forward => $"{forward.Namespace}.{forward.Service}").ToList())">
                @{ var renderService = true; }
                <Virtualize Context="podGroups" Items="serviceGroups.GroupBy(forward => forward.Pod).ToList()">
                    @{ var renderPod = true; }
                    <Virtualize Context="portForward" Items="@podGroups.ToList()">
                        <tr>
                            <td class="@(renderService ? "" : "no-borders")">@(renderService ? portForward.Namespace : "")</td>
                            <td class="@(renderService ? "" : "no-borders")">@(renderService ? portForward.Service : "")</td>
                            <td class="@(renderPod ? "" : "no-borders")">@(renderPod ? portForward.Pod : "")</td>
                            <td>@portForward.PodPort</td>
                            <td>@portForward.ProtocolType</td>
                            <td>
                                <MatTextField TValue="int?" @bind-Value="@portForward.LocalPort" />
                            </td>
                            <td>
                                <MatSlideToggle TValue="bool" ValueChanged="@(enable => ChangePortForwardAsync(portForward, enable))" />
                            </td>
                        </tr>
                        @{
                            renderPod = false;
                            renderService = false;
                        }
                    </Virtualize>
                </Virtualize>
            </Virtualize>
        </tbody>
    </table>
}

@code
{
    private readonly List<global::Port.Shared.PortForward> _portForwards = new();
    private Deployment[] _deployments = new Deployment[0];
    private Pod[]? _pods;
    private readonly CancellationTokenSource _cts = new();
    private CancellationToken CancellationToken => _cts.Token;

    [Parameter]
    public string Context { get; set; } = default!;

    [CascadingParameter]
    public Error Error { get; set; } = default!;

    private readonly SemaphoreSlimGate _gate = SemaphoreSlimGate.OneAtATime;

    protected override async Task OnParametersSetAsync()
    {
        using (await _gate.WaitAsync(CancellationToken)
                          .ConfigureAwait(false))
        {
            if (Error.HasError())
            {
                return;
            }

            try
            {
                _deployments = await Http.GetFromNewtonsoftJsonAsync<Deployment[]>($"Deployment/{Context}", cancellationToken: CancellationToken)
                                         .ConfigureAwait(false);
                _pods = await Http.GetFromNewtonsoftJsonAsync<Pod[]>($"Pod/{Context}", cancellationToken: CancellationToken)
                                  .ConfigureAwait(false);
                var services = await Http.GetFromNewtonsoftJsonAsync<Service[]>($"Service/{Context}", cancellationToken: CancellationToken)
                                         .ConfigureAwait(false);
                foreach (var service in services)
                {
                    foreach (var pod in _pods.WhereServiceIsHosted(service))
                    {
                        foreach (var port in service.Ports)
                        {
                            _portForwards.Add(new global::Port.Shared.PortForward(
                                service.Namespace,
                                pod.Name,
                                service.Name,
                                port.ProtocolType,
                                port.Number));
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Error.ProcessError(e);
            }
        }
    }

    private async Task ChangePortForwardAsync(
            global::Port.Shared.PortForward portForward,
            bool enable)
    {
        if (enable)
        {
            await Http.PostAsJsonAsync($"Service/{Context}/portforward", portForward, cancellationToken: CancellationToken)
                .ConfigureAwait(false);
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
        _gate.Dispose();
    }
}