@page "/contexts/{Context}"
@using Port.Shared
@using System.Threading
@using Grpc.Net.Client
@using Port.Client.Threading
@using Port.Client.Services
@inject HttpClient Http
@inject GrpcChannel Channel
@implements IAsyncDisposable

<h1>Port forwards</h1>

<p>Configured port forwards.</p>

@if (_pods == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h2>Deployments</h2>
    <table class="table">
        <thead>
            <tr>
                <th>@nameof(Deployment.Namespace)</th>
                <th>@nameof(Deployment.Name)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var deployment in _deployments)
            {
                <tr>
                    <td>@deployment.Namespace</td>
                    <td>@deployment.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Pods</h2>
    <table class="table">
        <thead>
            <tr>
                <th>@nameof(Pod.Namespace)</th>
                <th>@nameof(Pod.Name)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pod in _pods)
            {
                <tr>
                    <td>@pod.Namespace</td>
                    <td>@pod.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Services</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Namespace</th>
                <th>Service</th>
                <th>Pod</th>
                <th>Container port</th>
                <th>Protocol type</th>
                <th>Host port</th>
                <th>Enable / Disable</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var serviceGroups in _portForwards.Values.GroupBy(forward => $"{forward.Model.Namespace}.{forward.Model.Service}"))
            {
                var renderService = true;
                @foreach (var podGroups in serviceGroups.GroupBy(forward => forward.Model.Pod))
                {
                    var renderPod = true;
                    @foreach (var portForward in podGroups)
                    {
                        <tr>
                            <td class="@(renderService ? "" : "no-borders")">@(renderService ? portForward.Model.Namespace : "")</td>
                            <td class="@(renderService ? "" : "no-borders")">@(renderService ? portForward.Model.Service : "")</td>
                            <td class="@(renderPod ? "" : "no-borders")">@(renderPod ? portForward.Model.Pod : "")</td>
                            <td>@portForward.Model.PodPort</td>
                            <td>@portForward.Model.ProtocolType</td>
                            <td>
                                <MatTextField TValue="int?" @bind-Value="@portForward.Model.LocalPort" />
                            </td>
                            <td>
                                <MatSlideToggle TValue="bool" Value="@portForward.Model.Forwarding" ValueChanged="@(enable => ChangePortForwardAsync(portForward, enable))" />
                            </td>
                        </tr>
                        renderPod = false;
                        renderService = false;
                    }
                }
            }
        </tbody>
    </table>
}

@code
{
    private Dictionary<string, PortForwardService> _portForwards = new();
    private Deployment[] _deployments = new Deployment[0];
    private Pod[]? _pods;
    private readonly CancellationTokenSource _cts = new();
    private CancellationToken CancellationToken => _cts.Token;

    [Parameter]
    public string Context { get; set; } = default!;

    [CascadingParameter]
    public Error Error { get; set; } = default!;

    private readonly SemaphoreSlimGate _gate = SemaphoreSlimGate.OneAtATime;


    protected override async Task OnParametersSetAsync()
    {
        using (await _gate.WaitAsync(CancellationToken))
        {
            if (Error.HasError())
            {
                return;
            }

            try
            {
                _deployments = await Http.GetFromNewtonsoftJsonAsync<Deployment[]>($"Deployment/{Context}", cancellationToken: CancellationToken);
                _pods = await Http.GetFromNewtonsoftJsonAsync<Pod[]>($"Pod/{Context}", cancellationToken: CancellationToken);
                var services = await Http.GetFromNewtonsoftJsonAsync<Service[]>($"Service/{Context}", cancellationToken: CancellationToken);

                var portForwards = new Dictionary<string, PortForwardService>();
                foreach (var service in services
                    .OrderBy(service => service.Namespace)
                    .ThenBy(service => service.Name))
                {
                    foreach (var pod in _pods.WhereServiceIsHosted(service)
                                             .OrderBy(pod => pod.Name))
                    {
                        foreach (var port in service.Ports
                                                    .OrderBy(port => port.Number))
                        {
                            var id = service.Namespace +
                                     pod.Name +
                                     service.Name +
                                     port.ProtocolType +
                                     port.Number;

                            if (!_portForwards.Remove(id, out var forwarder))
                            {
                                forwarder = new PortForwardService(
                                    new PortForwarder.PortForwarderClient(Channel),
                                    Context,
                                    new global::Port.Shared.PortForward(
                                        service.Namespace,
                                        pod.Name,
                                        service.Name,
                                        port.ProtocolType,
                                        port.Number));
                                forwarder.OnStateChangedAsync += () => InvokeAsync(StateHasChanged);
                                forwarder.OnErrorAsync += Error.ProcessErrorAsync;
                            }
                            portForwards.Add(id, forwarder);
                        }
                    }
                }

                await Task.WhenAll(_portForwards.Values.Select(forwarder => forwarder.DisposeAsync())
                                                .Where(valueTask => !valueTask.IsCompletedSuccessfully)
                                                .Select(valueTask => valueTask.AsTask()));
                _portForwards = portForwards;
            }
            catch (Exception e)
            {
                await Error.ProcessErrorAsync(e);
            }
        }
    }

    private async Task ChangePortForwardAsync(
        PortForwardService portForward,
        bool forward)
    {
        // The bounded value have to be set or the toggle component will potentially be
        // rendered toggled without being toggled which causes untoggling not to work
        portForward.Model.Forwarding = forward;
        try
        {
            if (forward)
                await portForward.ForwardAsync();
            else
                await portForward.StopAsync();
        }
        catch (Exception e)
        {
            await Error.ProcessErrorAsync(e);
        }
    }

    public async ValueTask DisposeAsync()
    {
        _cts.Cancel();
        await Task.WhenAll(_portForwards.Values.Select(forwarder => forwarder.DisposeAsync())
                                  .Where(valueTask => !valueTask.IsCompletedSuccessfully)
                                  .Select(valueTask => valueTask.AsTask()));
        _cts.Dispose();
        _gate.Dispose();
    }
}